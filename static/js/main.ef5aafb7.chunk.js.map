{"version":3,"sources":["component/Alert.js","component/Navbar.js","component/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","backgroundColor","onChange","event","target","value","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","replace","handleWord","length","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ef5aafb7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word) =>{\r\n        const lower= word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n            props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"\">Home</a>\r\n                            </li>\r\n                        </ul>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n                        <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title Hear',\r\n    aboutText: 'About'\r\n}\r\n\r\n","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase !\", \"success\");\r\n\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowecase !\", \"success\");\r\n\r\n    }\r\n\r\n    const handleonChange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleClearText = () => {\r\n        setText('');\r\n        props.showAlert(\"Clear Text\", \"success\");\r\n    }\r\n\r\n    const handleCopyText = () => {\r\n        var text = document.getElementById('myBox')\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copy Text\", \"success\");\r\n\r\n    }\r\n\r\n    const handleExtraSpace = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Remove extra space\", \"success\");\r\n\r\n    }\r\n\r\n    const handleWord = (text) => {\r\n        // let word = text.split(/[ ]+/);\r\n        return text.replace(/\\s{2,}/g, ' ')\r\n        // return (/\\s/).test(text);\r\n        // const textword = word.join(\" \")\r\n        // return textword;\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className='container' style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" style={{\r\n                        backgroundColor: props.mode === 'dark' ? '#042743' : 'white',\r\n                        color: props.mode === 'dark' ? 'white' : '#042743'\r\n                    }} onChange={handleonChange} value={text} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className='btn btn-primary mx-1' onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className='btn btn-primary mx-1' onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button className='btn btn-primary mx-1' onClick={handleClearText}>Clear Text</button>\r\n                <button className='btn btn-primary mx-1' onClick={handleCopyText}>Copy Text</button>\r\n                <button className='btn btn-primary mx-1' onClick={handleExtraSpace}>Remove extra space</button>\r\n            </div>\r\n            <div className='container my-3' style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h1>Your text summary</h1>\r\n                <p>{handleWord(text).length} words {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : 'Enter Somthing to preview hear'}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useState } from 'react';\r\nimport './App.css';\r\nimport Alert from './component/Alert';\r\nimport Navbar from './component/Navbar';\r\nimport TextForm from './component/TextForm';\r\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light') //whether dark mode enable ot not\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type\r\n    })\r\n\r\n    setTimeout(() => {\r\n      setAlert(null)\r\n    }, 1000);\r\n  }\r\n\r\n  const toggleMode = () => {\r\n    if (mode === 'light') {\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#042743'\r\n      showAlert(\"Dark mode has been Enabled\", \"success\")\r\n    } else {\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white'\r\n      showAlert(\"Light mode has been Enabled\", \"success\")\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      {/* <Router> */}\r\n      {/* <Navbar /> */}\r\n      <Navbar title='TextUtils' aboutText='AboutUs' mode={mode} toggleMode={toggleMode} />\r\n      <Alert alert={alert} />\r\n      <div className='container my-3'>\r\n        {/* <Routes> */}\r\n        <TextForm showAlert={showAlert} heading='Enter the text to analyze below' mode={mode} />\r\n        {/* <Route  path=\"/\" element={} />\r\n            <Route  path='/about' element={<About />}></Route> */}\r\n        {/* </Routes> */}\r\n      </div>\r\n      {/* </Router> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}